CCS PCM C Compiler, Version 4.105, 5967               21-Apr-14 19:12

               Filename: C:\Alan\GIT\serialTest\serialTest.lst

               ROM used: 623 words (15%)
                         Largest free fragment is 2048
               RAM used: 20 (8%) at main() level
                         30 (12%) worst case
               Stack:    4 worst case (1 in main + 3 for interrupts)

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   211
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  25
0008:  MOVF   7F,W
0009:  MOVWF  24
000A:  MOVF   0A,W
000B:  MOVWF  2B
000C:  CLRF   0A
000D:  SWAPF  24,F
000E:  MOVF   04,W
000F:  MOVWF  26
0010:  MOVF   20,W
0011:  MOVWF  27
0012:  MOVF   21,W
0013:  MOVWF  28
0014:  MOVF   22,W
0015:  MOVWF  29
0016:  MOVF   23,W
0017:  MOVWF  2A
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.5
001B:  GOTO   01E
001C:  BTFSC  0B.2
001D:  GOTO   035
001E:  MOVLW  8C
001F:  MOVWF  04
0020:  BTFSS  00.2
0021:  GOTO   024
0022:  BTFSC  0C.2
0023:  GOTO   037
0024:  MOVF   26,W
0025:  MOVWF  04
0026:  MOVF   27,W
0027:  MOVWF  20
0028:  MOVF   28,W
0029:  MOVWF  21
002A:  MOVF   29,W
002B:  MOVWF  22
002C:  MOVF   2A,W
002D:  MOVWF  23
002E:  MOVF   2B,W
002F:  MOVWF  0A
0030:  SWAPF  25,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
0035:  BCF    0A.3
0036:  GOTO   1CE
0037:  BCF    0A.3
0038:  GOTO   0D5
.................... /***********************************************************************  
....................  * This works! 
....................  * <<<< Found the issue.>>>> 
....................  * Author:  Alan Curley 
....................  * Date:    12 SEP 2013 
....................  * Program: serialTest.C            Version:    1.0 
....................  * Purpose:    This program is a simple test program that tests and outlines 
....................  *             a program that will communicate with the PicKit2 programmer 
....................  *             via the P1 connector using the LPC Demo board. 
....................  *             This way, the PicKit can be left connected to the programming 
....................  *             port for programming and serial communication testing. 
....................  *              - Added interrupt for driving LEDs  to determine what happens 
....................  *                to serial output. 
....................  *              - Added a routine for outputting a string on interrupt from  
....................  *                port B. 
....................  *              - Change/Add Capture compare routine to Trigger message send. 
....................  *             <<<<  Added the RTCC Interrupts and the RS232 text came out as Jargon. 
....................  *                   Left the data all the same but disabled the RTCC Interrupts 
....................  *                   and the Text becomes clear again. 
....................  *                   HMMMM >>>>] 
....................  *              - Disabled & Re-Enabled the RTCC interrupt between printfs.  Works 
....................  *              - Timer + Overflow are working. 
....................  *              - Removed the port B references after system was only operating 
....................                   while port B was held FALSE. 
....................  ***********************************************************************/ 
.................... #include <16F690.h> 
.................... //////// Standard Header file for the PIC16F690 device //////////////// 
.................... #device PIC16F690 
.................... #list 
....................  
.................... #FUSES  NOWDT, INTRC_IO, NOMCLR, BROWNOUT, NOCPD, NOPUT, NOIESO, NOFCMEN 
.................... #use    delay(clock=8000000) 
*
01FC:  MOVLW  33
01FD:  MOVWF  04
01FE:  BCF    03.7
01FF:  MOVF   00,W
0200:  BTFSC  03.2
0201:  GOTO   20F
0202:  MOVLW  02
0203:  MOVWF  21
0204:  CLRF   20
0205:  DECFSZ 20,F
0206:  GOTO   205
0207:  DECFSZ 21,F
0208:  GOTO   204
0209:  MOVLW  97
020A:  MOVWF  20
020B:  DECFSZ 20,F
020C:  GOTO   20B
020D:  DECFSZ 00,F
020E:  GOTO   202
020F:  BCF    0A.3
0210:  GOTO   26B (RETURN)
.................... #use    rs232(baud=9600,xmit=PIN_A0,rcv=PIN_A1,parity=N,BITS=8,ERRORS) 
*
0039:  BSF    03.5
003A:  BCF    05.0
003B:  BCF    03.5
003C:  BCF    05.0
003D:  MOVLW  08
003E:  MOVWF  21
003F:  GOTO   040
0040:  NOP
0041:  BSF    21.7
0042:  GOTO   051
0043:  BCF    21.7
0044:  RRF    3A,F
0045:  BTFSC  03.0
0046:  BSF    05.0
0047:  BTFSS  03.0
0048:  BCF    05.0
0049:  BSF    21.6
004A:  GOTO   051
004B:  BCF    21.6
004C:  DECFSZ 21,F
004D:  GOTO   044
004E:  GOTO   04F
004F:  NOP
0050:  BSF    05.0
0051:  MOVLW  3F
0052:  MOVWF  04
0053:  DECFSZ 04,F
0054:  GOTO   053
0055:  NOP
0056:  BTFSC  21.7
0057:  GOTO   043
0058:  BTFSC  21.6
0059:  GOTO   04B
005A:  RETURN
....................  
.................... #USE    FAST_IO(A) 
.................... #USE    FAST_IO(B) 
.................... #USE    FAST_IO(C) 
....................  
.................... /** 
....................  * Declare Variables 
....................  */ 
....................  
.................... #define P1_RX                    PIN_A0 
.................... #define P1_TX                    PIN_A1 
.................... #define LPC_SW1                  PIN_A3 
.................... #define EXT_SW1                  PIN_B4 
.................... #define LPC_DS1                  PIN_C0 
.................... #define LPC_DS2                  PIN_C1 
.................... #define LPC_DS3                  PIN_C2 
.................... #define LPC_DS4                  PIN_C3 
.................... #define CCP1_PIN                 PIN_C5 
....................  
.................... //------------------------- Local Variables ------------------------------ 
....................  int counterVal;                 // A Counter to demonstrate the functionality 
....................  boolean LED1;                   // Boolean representing LED1 
....................  boolean LED2;                   // Boolean representing LED2  
....................  boolean LED3;                   // Boolean representing LED3   
....................  boolean LED4;                   // Boolean representing LED4 
....................  int ccpVal;                     // Value contained in the CCP register. 
....................  int timer1Val;                  // Value representing Timer 01. 
....................  int timerOflwCount;             // Number of times the timer has overflow                 
....................  int timerOflwCount1;            // Number of times the timer has overflow                 
....................  boolean ccpInterrupt;           // Interrupt occurred for capture compare. 
....................  boolean risingEdge;             // Monitoring the Rising edge or Falling edge of CCP? 
....................                                      
....................                                   
.................... /**  
....................  * Interrupt routine on change of Port RB 
....................  */ 
....................   
.................... /**    
....................  * Interrupt routine on Capture Compare detection 
....................  */  
.................... #INT_CCP1 
.................... void ccp1_ISR(void) 
.................... { 
....................    LED1= !LED1;  
*
00D5:  MOVLW  01
00D6:  XORWF  2D,F
....................    // Add the additional maintenance routine here. 
....................    if(risingEdge)                               // Monitoring the rising edge 
00D7:  BTFSS  2D.5
00D8:  GOTO   0E9
....................    {                                             
....................       set_timer0(0);                            // Reset the timer to Zero 
00D9:  CLRF   01
....................       timerOflwCount = 0;                       // as well as the overflows. 
00DA:  CLRF   30
....................       timerOflwCount1= 0; 
00DB:  CLRF   31
....................       setup_ccp1(CCP_CAPTURE_FE);               // CCP set up for falling edge capture. 
00DC:  CLRF   17
00DD:  MOVLW  04
00DE:  MOVWF  17
00DF:  CLRF   1C
00E0:  CLRF   1D
00E1:  MOVLW  01
00E2:  BSF    03.5
00E3:  BSF    03.6
00E4:  MOVWF  1D
....................       risingEdge = false;                        // Start monitoring the falling edge 
00E5:  BCF    03.5
00E6:  BCF    03.6
00E7:  BCF    2D.5
....................    } 
....................    else                                         // Monitoring the Falling edge. 
00E8:  GOTO   0F8
....................    { 
....................       ccpInterrupt = true;                      // Main routine to print the results. 
00E9:  BSF    2D.4
....................       setup_ccp1(CCP_CAPTURE_RE);               // Start monitoring the Rising Edge again. 
00EA:  CLRF   17
00EB:  MOVLW  05
00EC:  MOVWF  17
00ED:  CLRF   1C
00EE:  CLRF   1D
00EF:  MOVLW  01
00F0:  BSF    03.5
00F1:  BSF    03.6
00F2:  MOVWF  1D
....................       //disable_interrupts(INT_RTCC);             // Disabling the Timer RTCC - No adjust overflows. 
....................       risingEdge = true;                        // Start monitoring the rising edge 
00F3:  BCF    03.5
00F4:  BCF    03.6
00F5:  BSF    2D.5
....................       ccpVal = get_timer0();                    // Record the Value of the CCP Register. 
00F6:  MOVF   01,W
00F7:  MOVWF  2E
....................    } 
....................    printf("CCP interrupt Detected: %d - %d - %u\r\n",timerOflwCount1,timerOflwCount,ccpVal); 
00F8:  MOVLW  BA
00F9:  BSF    03.6
00FA:  MOVWF  0D
00FB:  MOVLW  01
00FC:  MOVWF  0F
00FD:  BCF    03.0
00FE:  MOVLW  18
00FF:  BCF    03.6
0100:  MOVWF  34
*
014F:  MOVF   31,W
0150:  MOVWF  34
0151:  MOVLW  1F
0152:  MOVWF  35
0153:  CALL   070
0154:  MOVLW  20
0155:  MOVWF  3A
0156:  CALL   039
0157:  MOVLW  2D
0158:  MOVWF  3A
0159:  CALL   039
015A:  MOVLW  20
015B:  MOVWF  3A
015C:  CALL   039
015D:  MOVF   30,W
015E:  MOVWF  34
015F:  MOVLW  1F
0160:  MOVWF  35
0161:  CALL   070
0162:  MOVLW  20
0163:  MOVWF  3A
0164:  CALL   039
0165:  MOVLW  2D
0166:  MOVWF  3A
0167:  CALL   039
0168:  MOVLW  20
0169:  MOVWF  3A
016A:  CALL   039
016B:  MOVF   2E,W
016C:  MOVWF  34
016D:  MOVLW  1B
016E:  MOVWF  35
*
01A2:  MOVLW  0D
01A3:  MOVWF  3A
01A4:  CALL   039
01A5:  MOVLW  0A
01A6:  MOVWF  3A
01A7:  CALL   039
....................    output_bit(LPC_DS1,LED1); 
01A8:  BTFSC  2D.0
01A9:  GOTO   1AC
01AA:  BCF    07.0
01AB:  GOTO   1AD
01AC:  BSF    07.0
....................    output_bit(LPC_DS2,LED2); 
01AD:  BTFSC  2D.1
01AE:  GOTO   1B1
01AF:  BCF    07.1
01B0:  GOTO   1B2
01B1:  BSF    07.1
....................    output_bit(LPC_DS3,LED3); 
01B2:  BTFSC  2D.2
01B3:  GOTO   1B6
01B4:  BCF    07.2
01B5:  GOTO   1B7
01B6:  BSF    07.2
....................  
.................... } 
....................  
.................... /** 
....................  * Interrupt routine for Timer elapsing 
....................  */ 
01B7:  BCF    0C.2
01B8:  BCF    0A.3
01B9:  GOTO   024
.................... #INT_RTCC 
.................... void rtcc_ISR(void) 
.................... { 
....................    LED2 != LED2; 
*
01CE:  MOVF   2D,W
01CF:  XORWF  2D,W
01D0:  ANDLW  02
01D1:  BTFSC  03.2
01D2:  MOVLW  00
....................    if(timerOflwCount>=127) 
01D3:  MOVF   30,W
01D4:  SUBLW  7E
01D5:  BTFSC  03.0
01D6:  GOTO   1DF
....................    { 
....................       LED3 != LED3; 
01D7:  MOVF   2D,W
01D8:  XORWF  2D,W
01D9:  ANDLW  04
01DA:  BTFSC  03.2
01DB:  MOVLW  00
....................       timerOflwCount = 0; 
01DC:  CLRF   30
....................       timerOflwCount1++; 
01DD:  INCF   31,F
....................    } 
....................    else 
01DE:  GOTO   1E0
....................       timerOflwCount++; 
01DF:  INCF   30,F
....................        
....................    if(timerOflwCount1 >= 127){ 
01E0:  MOVF   31,W
01E1:  SUBLW  7E
01E2:  BTFSC  03.0
01E3:  GOTO   1EA
....................       timerOflwCount1 = 0; 
01E4:  CLRF   31
....................       LED4 != LED4; 
01E5:  MOVF   2D,W
01E6:  XORWF  2D,W
01E7:  ANDLW  08
01E8:  BTFSC  03.2
01E9:  MOVLW  00
....................    } 
....................    output_bit(LPC_DS2,LED2); 
01EA:  BTFSC  2D.1
01EB:  GOTO   1EE
01EC:  BCF    07.1
01ED:  GOTO   1EF
01EE:  BSF    07.1
....................    output_bit(LPC_DS3,LED3); 
01EF:  BTFSC  2D.2
01F0:  GOTO   1F3
01F1:  BCF    07.2
01F2:  GOTO   1F4
01F3:  BSF    07.2
....................    output_bit(LPC_DS4,LED4); 
01F4:  BTFSC  2D.3
01F5:  GOTO   1F8
01F6:  BCF    07.3
01F7:  GOTO   1F9
01F8:  BSF    07.3
....................  
.................... } 
....................  
.................... /** 
....................  * Main Routine 
....................  */ 
01F9:  BCF    0B.2
01FA:  BCF    0A.3
01FB:  GOTO   024
.................... void main(){ 
*
0211:  CLRF   04
0212:  BCF    03.7
0213:  MOVLW  1F
0214:  ANDWF  03,F
0215:  MOVLW  71
0216:  BSF    03.5
0217:  MOVWF  0F
0218:  MOVF   0F,W
0219:  BCF    05.0
021A:  BCF    03.5
021B:  BSF    05.0
021C:  BSF    03.6
021D:  BCF    1F.0
021E:  BCF    1F.1
021F:  BCF    1F.2
0220:  BCF    1F.3
0221:  BCF    03.6
0222:  BCF    1F.6
0223:  MOVLW  00
0224:  BSF    03.6
0225:  MOVWF  1E
0226:  CLRF   19
0227:  CLRF   1A
0228:  BSF    03.5
0229:  CLRF   1E
022A:  BCF    03.5
022B:  CLRF   1B
022C:  BCF    03.6
022D:  BCF    0D.5
....................  
....................    setup_oscillator(OSC_8MHZ);               // set internal oscillator to 8Mhz 
022E:  MOVLW  71
022F:  BSF    03.5
0230:  MOVWF  0F
0231:  MOVF   0F,W
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);  // Set up Timer 1 
0232:  MOVF   01,W
0233:  ANDLW  C7
0234:  IORLW  08
0235:  MOVWF  01
....................    setup_ccp1(CCP_CAPTURE_RE);               // CCP set up for rising edge capture. 
0236:  BCF    03.5
0237:  CLRF   17
0238:  MOVLW  05
0239:  MOVWF  17
023A:  CLRF   1C
023B:  CLRF   1D
023C:  MOVLW  01
023D:  BSF    03.5
023E:  BSF    03.6
023F:  MOVWF  1D
....................    set_tris_a(0x3E);                         // setup port a 
0240:  MOVLW  3E
0241:  BCF    03.6
0242:  MOVWF  05
....................    //set_tris_b(0x10);                         // Pin B4 input (Interrupt) 
....................    set_tris_c(0x20);                         // setup port c (C5 interrupt pin) 
0243:  MOVLW  20
0244:  MOVWF  07
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD);      // No Analog signals       
0245:  BCF    03.5
0246:  BSF    03.6
0247:  BCF    1F.0
0248:  BCF    1F.1
0249:  BCF    1F.2
024A:  BCF    1F.3
024B:  BCF    03.6
024C:  BCF    1F.6
024D:  MOVLW  00
024E:  BSF    03.6
024F:  MOVWF  1E
....................    //enable_interrupts(INT_RB); 
....................    enable_interrupts(INT_CCP1);              // Enable Capture Compare Interrupts. 
0250:  BSF    03.5
0251:  BCF    03.6
0252:  BSF    0C.2
....................    enable_interrupts(INT_RTCC);              // Enable real time counter overflow <<<< This is causeing the RS232 issue to go apeshit. 
0253:  BCF    03.5
0254:  BSF    0B.5
....................    enable_interrupts(GLOBAL);                // Enable Global Interrupts 
0255:  MOVLW  C0
0256:  IORWF  0B,F
....................  
....................    port_a_pullups(TRUE); 
0257:  MOVLW  01
0258:  BSF    03.5
0259:  MOVWF  15
025A:  BCF    01.7
....................  
.................... // Setup Default values 
....................    LED1 = false; 
025B:  BCF    03.5
025C:  BCF    2D.0
....................    LED2 = false; 
025D:  BCF    2D.1
....................    LED3 = false; 
025E:  BCF    2D.2
....................    LED4 = false; 
025F:  BCF    2D.3
....................    counterVal = 0; 
0260:  CLRF   2C
....................    ccpVal = 0; 
0261:  CLRF   2E
....................    output_low(LPC_DS1); 
0262:  BCF    07.0
....................    output_low(LPC_DS2); 
0263:  BCF    07.1
....................    output_low(LPC_DS3); 
0264:  BCF    07.2
....................    output_low(LPC_DS4); 
0265:  BCF    07.3
....................           
....................    while(1){         
....................  
.................... /* 
....................       disable_interrupts(INT_RTCC);          // Ensure the RTCC Interrupt is disabled. 
....................       counterVal++;                          // Increment CounterVal 
....................       if((counterVal&0X80)>0) 
....................          counterVal = 0;                     // Manage overflow. 
....................        
....................       printf("Counter at %2u \r\n",counterVal);    // Print out the counter 
....................       LED1 = !LED1; 
....................      
....................       // Output the Value of LED1 to LED4. 
....................       output_bit(LPC_DS1,LED1); 
....................       output_bit(LPC_DS2,LED2); 
....................       output_bit(LPC_DS3,LED3); 
....................       output_bit(LPC_DS4,LED4);   //*/ 
....................     
....................    /* 
....................       if(portBInterrupt) 
....................       { 
....................          printf("Port B interrupt Detected\r\n"); 
....................          portBInterrupt = false; 
....................       } //*/ 
....................  
....................    /* 
....................       if(ccpInterrupt) 
....................       { 
....................          printf("CCP interrupt Detected: %d - %d - %u\r\n",timerOflwCount1,timerOflwCount,ccpVal); 
....................          ccpInterrupt = false; 
....................       }       
....................        
....................       enable_interrupts(INT_RTCC);           // Re-enable the Timer interrupt */ 
....................        
....................       delay_ms(1000);                        // Delay a second.       
0266:  MOVLW  04
0267:  MOVWF  32
0268:  MOVLW  FA
0269:  MOVWF  33
026A:  GOTO   1FC
026B:  DECFSZ 32,F
026C:  GOTO   268
....................    } 
026D:  GOTO   266
.................... } 
026E:  SLEEP

Configuration Fuses:
   Word  1: 33D4   INTRC_IO NOPROTECT BROWNOUT NOMCLR NOCPD NOWDT NOPUT NOIESO NOFCMEN
