CCS PCM C Compiler, Version 4.105, 5967               19-Sep-13 21:05

               Filename: C:\Alan\GIT\serialTest\serialTest.lst

               ROM used: 549 words (13%)
                         Largest free fragment is 2048
               RAM used: 16 (6%) at main() level
                         20 (8%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   185
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  25
0008:  MOVF   7F,W
0009:  MOVWF  24
000A:  MOVF   0A,W
000B:  MOVWF  2B
000C:  CLRF   0A
000D:  SWAPF  24,F
000E:  MOVF   04,W
000F:  MOVWF  26
0010:  MOVF   20,W
0011:  MOVWF  27
0012:  MOVF   21,W
0013:  MOVWF  28
0014:  MOVF   22,W
0015:  MOVWF  29
0016:  MOVF   23,W
0017:  MOVWF  2A
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.2
001D:  GOTO   020
001E:  BTFSC  0C.2
001F:  GOTO   035
0020:  BTFSS  0B.3
0021:  GOTO   024
0022:  BTFSC  0B.0
0023:  GOTO   037
0024:  MOVF   26,W
0025:  MOVWF  04
0026:  MOVF   27,W
0027:  MOVWF  20
0028:  MOVF   28,W
0029:  MOVWF  21
002A:  MOVF   29,W
002B:  MOVWF  22
002C:  MOVF   2A,W
002D:  MOVWF  23
002E:  MOVF   2B,W
002F:  MOVWF  0A
0030:  SWAPF  25,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
0035:  BCF    0A.3
0036:  GOTO   041
0037:  BCF    0A.3
0038:  GOTO   039
.................... /***********************************************************************  
....................  * Author:  Alan Curley 
....................  * Date:    12 SEP 2013 
....................  * Program: serialTest.C            Version:    1.0 
....................  * Purpose:    This program is a simple test program that tests and outlines 
....................  *             a program that will communicate with the PicKit2 programmer 
....................  *             via the P1 connector using the LPC Demo board. 
....................  *             This way, the PicKit can be left connected to the programming 
....................  *             port for programming and serial communication testing. 
....................  *              - Added interrupt for driving LEDs  to determine what happens 
....................  *                to serial output. 
....................  *              - Added a routine for outputting a string on interrupt from  
....................  *                port B. 
....................  *              - Change/Add Capture compare routine to Trigger message send. 
....................  ***********************************************************************/ 
.................... #include <16F690.h> 
.................... //////// Standard Header file for the PIC16F690 device //////////////// 
.................... #device PIC16F690 
.................... #list 
....................  
.................... #FUSES  NOWDT, INTRC_IO, NOMCLR, BROWNOUT, NOCPD, NOPUT, NOIESO, NOFCMEN 
.................... #use    delay(clock=8000000) 
0170:  MOVLW  2F
0171:  MOVWF  04
0172:  BCF    03.7
0173:  MOVF   00,W
0174:  BTFSC  03.2
0175:  GOTO   183
0176:  MOVLW  02
0177:  MOVWF  21
0178:  CLRF   20
0179:  DECFSZ 20,F
017A:  GOTO   179
017B:  DECFSZ 21,F
017C:  GOTO   178
017D:  MOVLW  97
017E:  MOVWF  20
017F:  DECFSZ 20,F
0180:  GOTO   17F
0181:  DECFSZ 00,F
0182:  GOTO   176
0183:  BCF    0A.3
0184:  GOTO   221 (RETURN)
.................... #use    rs232(baud=9600,xmit=PIN_A0,rcv=PIN_A1,parity=N,BITS=8,ERRORS) 
*
006D:  BSF    03.5
006E:  BCF    05.0
006F:  BCF    03.5
0070:  BCF    05.0
0071:  MOVLW  08
0072:  MOVWF  21
0073:  GOTO   074
0074:  NOP
0075:  BSF    21.7
0076:  GOTO   085
0077:  BCF    21.7
0078:  RRF    32,F
0079:  BTFSC  03.0
007A:  BSF    05.0
007B:  BTFSS  03.0
007C:  BCF    05.0
007D:  BSF    21.6
007E:  GOTO   085
007F:  BCF    21.6
0080:  DECFSZ 21,F
0081:  GOTO   078
0082:  GOTO   083
0083:  NOP
0084:  BSF    05.0
0085:  MOVLW  3F
0086:  MOVWF  04
0087:  DECFSZ 04,F
0088:  GOTO   087
0089:  NOP
008A:  BTFSC  21.7
008B:  GOTO   077
008C:  BTFSC  21.6
008D:  GOTO   07F
008E:  RETURN
....................  
.................... #USE    FAST_IO(A) 
.................... #USE    FAST_IO(B) 
.................... #USE    FAST_IO(C) 
....................  
.................... /** 
....................  * Declare Variables 
....................  */ 
....................  
.................... #define P1_RX                    PIN_A0 
.................... #define P1_TX                    PIN_A1 
.................... #define LPC_SW1                  PIN_A3 
.................... #define EXT_SW1                  PIN_B4 
.................... #define LPC_DS1                  PIN_C0 
.................... #define LPC_DS2                  PIN_C1 
.................... #define LPC_DS3                  PIN_C2 
.................... #define LPC_DS4                  PIN_C3 
.................... #define CCP1_PIN                 PIN_C5 
....................  
.................... //------------------------- Local Variables ------------------------------ 
....................  int counterVal;                 // A Counter to demonstrate the functionality 
....................  boolean LED1;                   // Boolean representing LED1 
....................  boolean LED2;                   // Boolean representing LED2  
....................  boolean LED3;                   // Boolean representing LED3   
....................  boolean portBInterrupt;         // Interrupt occurred at Port B 
....................  boolean ccpInterrupt;           // Interrupt occurred for capture compare. 
....................                                      
....................                                   
.................... /**  
....................  * Interrupt routine on change of Port RB 
....................  */ 
....................   
.................... #INT_RB 
.................... void portB_ISR(void) 
.................... { 
....................    // Clean and Simple... Toggle the LED. 
....................    if(!portBInterrupt) 
*
0039:  BTFSC  2D.3
003A:  GOTO   03E
....................    { 
....................       LED2= !LED2; 
003B:  MOVLW  02
003C:  XORWF  2D,F
....................       portBInterrupt = true; 
003D:  BSF    2D.3
....................    } 
....................     
.................... } 
....................  
.................... /** 
....................  * Interrupt routine on Capture Compare detection 
....................  */  
003E:  BCF    0B.0
003F:  BCF    0A.3
0040:  GOTO   024
.................... #INT_CCP1 
.................... void ccp1_ISR(void) 
.................... { 
....................    // Clean and simple to start... Toggle another LED. 
....................    if(!ccpInterrupt) 
0041:  BTFSC  2D.4
0042:  GOTO   046
....................    { 
....................       LED3 = !LED3; 
0043:  MOVLW  04
0044:  XORWF  2D,F
....................       ccpInterrupt = true; 
0045:  BSF    2D.4
....................    } 
....................  
.................... } 
....................  
.................... /** 
....................  * Main Routine 
....................  */ 
0046:  BCF    0C.2
0047:  BCF    0A.3
0048:  GOTO   024
.................... void main(){ 
*
006C:  DATA 00,00
*
0185:  CLRF   04
0186:  BCF    03.7
0187:  MOVLW  1F
0188:  ANDWF  03,F
0189:  MOVLW  71
018A:  BSF    03.5
018B:  MOVWF  0F
018C:  MOVF   0F,W
018D:  BCF    05.0
018E:  BCF    03.5
018F:  BSF    05.0
0190:  BSF    03.6
0191:  BCF    1F.0
0192:  BCF    1F.1
0193:  BCF    1F.2
0194:  BCF    1F.3
0195:  BCF    03.6
0196:  BCF    1F.6
0197:  MOVLW  00
0198:  BSF    03.6
0199:  MOVWF  1E
019A:  CLRF   19
019B:  CLRF   1A
019C:  BSF    03.5
019D:  CLRF   1E
019E:  BCF    03.5
019F:  CLRF   1B
01A0:  BCF    03.6
01A1:  BCF    0D.5
....................  
....................    setup_oscillator(OSC_8MHZ);               // set internal oscillator to 8Mhz 
01A2:  MOVLW  71
01A3:  BSF    03.5
01A4:  MOVWF  0F
01A5:  MOVF   0F,W
....................    setup_ccp1(CCP_CAPTURE_RE);               // CCP set up for rising edge capture. 
01A6:  BCF    03.5
01A7:  CLRF   17
01A8:  MOVLW  05
01A9:  MOVWF  17
01AA:  CLRF   1C
01AB:  CLRF   1D
01AC:  MOVLW  01
01AD:  BSF    03.5
01AE:  BSF    03.6
01AF:  MOVWF  1D
....................    set_tris_a(0x3E);                         // setup port a 
01B0:  MOVLW  3E
01B1:  BCF    03.6
01B2:  MOVWF  05
....................    set_tris_b(0x10);                         // Pin B4 input (Interrupt) 
01B3:  MOVLW  10
01B4:  MOVWF  06
....................    set_tris_c(0x20);                         // setup port c (C5 interrupt pin) 
01B5:  MOVLW  20
01B6:  MOVWF  07
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD);      // No Analog signals       
01B7:  BCF    03.5
01B8:  BSF    03.6
01B9:  BCF    1F.0
01BA:  BCF    1F.1
01BB:  BCF    1F.2
01BC:  BCF    1F.3
01BD:  BCF    03.6
01BE:  BCF    1F.6
01BF:  MOVLW  00
01C0:  BSF    03.6
01C1:  MOVWF  1E
....................    enable_interrupts(INT_RB); 
01C2:  BCF    03.6
01C3:  BSF    0B.3
01C4:  MOVLW  FF
01C5:  BSF    03.6
01C6:  IORWF  16,F
....................    enable_interrupts(INT_CCP1);              // Enable Capture Compare Interrupts. 
01C7:  BSF    03.5
01C8:  BCF    03.6
01C9:  BSF    0C.2
....................    enable_interrupts(GLOBAL);                // Enable Global Interrupts 
01CA:  MOVLW  C0
01CB:  BCF    03.5
01CC:  IORWF  0B,F
....................  
....................    port_a_pullups(TRUE); 
01CD:  MOVLW  01
01CE:  BSF    03.5
01CF:  MOVWF  15
01D0:  BCF    01.7
.................... // Setup Default values 
....................    LED1 = false; 
01D1:  BCF    03.5
01D2:  BCF    2D.0
....................    LED2 = false; 
01D3:  BCF    2D.1
....................    LED3 = false; 
01D4:  BCF    2D.2
....................    counterVal = 0; 
01D5:  CLRF   2C
....................    output_low(LPC_DS1); 
01D6:  BCF    07.0
....................    output_low(LPC_DS2); 
01D7:  BCF    07.1
....................    output_low(LPC_DS3); 
01D8:  BCF    07.2
....................    output_low(LPC_DS4); 
01D9:  BCF    07.3
....................     
....................    while(1){         
....................       counterVal++;                          // Increment CounterVal 
01DA:  INCF   2C,F
....................       if((counterVal&0X80)>0) 
01DB:  MOVF   2C,W
01DC:  ANDLW  80
01DD:  BTFSS  03.2
....................          counterVal = 0;                     // Manage overflow. 
01DE:  CLRF   2C
....................        
....................       printf("Counter at %2u \r\n",counterVal);    // Print out the counter 
01DF:  MOVLW  49
01E0:  BSF    03.6
01E1:  MOVWF  0D
01E2:  MOVLW  00
01E3:  MOVWF  0F
01E4:  BCF    03.0
01E5:  MOVLW  0B
01E6:  BCF    03.6
01E7:  MOVWF  2E
01E8:  GOTO   08F
01E9:  MOVF   2C,W
01EA:  MOVWF  2E
01EB:  MOVLW  11
01EC:  MOVWF  2F
01ED:  GOTO   0F4
01EE:  MOVLW  20
01EF:  MOVWF  32
01F0:  CALL   06D
01F1:  MOVLW  0D
01F2:  MOVWF  32
01F3:  CALL   06D
01F4:  MOVLW  0A
01F5:  MOVWF  32
01F6:  CALL   06D
....................       LED1 = !LED1; 
01F7:  MOVLW  01
01F8:  XORWF  2D,F
....................      
....................       // Output the Value of LED1 to ... LED1 funnily enough. 
....................       output_bit(LPC_DS1,LED1); 
01F9:  BTFSC  2D.0
01FA:  GOTO   1FD
01FB:  BCF    07.0
01FC:  GOTO   1FE
01FD:  BSF    07.0
....................       output_bit(LPC_DS2,LED2); 
01FE:  BTFSC  2D.1
01FF:  GOTO   202
0200:  BCF    07.1
0201:  GOTO   203
0202:  BSF    07.1
....................       output_bit(LPC_DS3,LED3); 
0203:  BTFSC  2D.2
0204:  GOTO   207
0205:  BCF    07.2
0206:  GOTO   208
0207:  BSF    07.2
....................        
....................       if(portBInterrupt) 
0208:  BTFSS  2D.3
0209:  GOTO   212
....................       { 
....................          printf("Port B interrupt Detected\r\n"); 
020A:  MOVLW  52
020B:  BSF    03.6
020C:  MOVWF  0D
020D:  MOVLW  00
020E:  MOVWF  0F
020F:  BCF    03.6
0210:  CALL   12A
....................          portBInterrupt = false; 
0211:  BCF    2D.3
....................       } 
....................       if(ccpInterrupt) 
0212:  BTFSS  2D.4
0213:  GOTO   21C
....................       { 
....................          printf("CCP interrupt Detected\r\n"); 
0214:  MOVLW  60
0215:  BSF    03.6
0216:  MOVWF  0D
0217:  MOVLW  00
0218:  MOVWF  0F
0219:  BCF    03.6
021A:  CALL   12A
....................          ccpInterrupt = false; 
021B:  BCF    2D.4
....................       } 
....................        
....................       delay_ms(1000);                        // Delay a second.       
021C:  MOVLW  04
021D:  MOVWF  2E
021E:  MOVLW  FA
021F:  MOVWF  2F
0220:  GOTO   170
0221:  DECFSZ 2E,F
0222:  GOTO   21E
....................    } 
0223:  GOTO   1DA
.................... } 
0224:  SLEEP

Configuration Fuses:
   Word  1: 33D4   INTRC_IO NOPROTECT BROWNOUT NOMCLR NOCPD NOWDT NOPUT NOIESO NOFCMEN
