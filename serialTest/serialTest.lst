CCS PCM C Compiler, Version 4.105, 5967               21-Apr-14 17:03

               Filename: C:\Alan\GIT\serialTest\serialTest.lst

               ROM used: 670 words (16%)
                         Largest free fragment is 2048
               RAM used: 20 (8%) at main() level
                         28 (11%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1DD
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  25
0008:  MOVF   7F,W
0009:  MOVWF  24
000A:  MOVF   0A,W
000B:  MOVWF  2B
000C:  CLRF   0A
000D:  SWAPF  24,F
000E:  MOVF   04,W
000F:  MOVWF  26
0010:  MOVF   20,W
0011:  MOVWF  27
0012:  MOVF   21,W
0013:  MOVWF  28
0014:  MOVF   22,W
0015:  MOVWF  29
0016:  MOVF   23,W
0017:  MOVWF  2A
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.5
001B:  GOTO   01E
001C:  BTFSC  0B.2
001D:  GOTO   039
001E:  MOVLW  8C
001F:  MOVWF  04
0020:  BTFSS  00.2
0021:  GOTO   024
0022:  BTFSC  0C.2
0023:  GOTO   03B
0024:  BTFSS  0B.3
0025:  GOTO   028
0026:  BTFSC  0B.0
0027:  GOTO   03D
0028:  MOVF   26,W
0029:  MOVWF  04
002A:  MOVF   27,W
002B:  MOVWF  20
002C:  MOVF   28,W
002D:  MOVWF  21
002E:  MOVF   29,W
002F:  MOVWF  22
0030:  MOVF   2A,W
0031:  MOVWF  23
0032:  MOVF   2B,W
0033:  MOVWF  0A
0034:  SWAPF  25,W
0035:  MOVWF  03
0036:  SWAPF  7F,F
0037:  SWAPF  7F,W
0038:  RETFIE
0039:  BCF    0A.3
003A:  GOTO   07C
003B:  BCF    0A.3
003C:  GOTO   047
003D:  BCF    0A.3
003E:  GOTO   03F
.................... /***********************************************************************  
....................  * This works! 
....................  * <<<< Found the issue.>>>> 
....................  * Author:  Alan Curley 
....................  * Date:    12 SEP 2013 
....................  * Program: serialTest.C            Version:    1.0 
....................  * Purpose:    This program is a simple test program that tests and outlines 
....................  *             a program that will communicate with the PicKit2 programmer 
....................  *             via the P1 connector using the LPC Demo board. 
....................  *             This way, the PicKit can be left connected to the programming 
....................  *             port for programming and serial communication testing. 
....................  *              - Added interrupt for driving LEDs  to determine what happens 
....................  *                to serial output. 
....................  *              - Added a routine for outputting a string on interrupt from  
....................  *                port B. 
....................  *              - Change/Add Capture compare routine to Trigger message send. 
....................  *             <<<<  Added the RTCC Interrupts and the RS232 text came out as Jargon. 
....................  *                   Left the data all the same but disabled the RTCC Interrupts 
....................  *                   and the Text becomes clear again. 
....................  *                   HMMMM >>>>] 
....................  *              - Disabled & Re-Enabled the RTCC interrupt between printfs.  Works 
....................  *              - Timer + Overflow are working. 
....................  *              - Removed the port B references after system was only operating 
....................                   while port B was held FALSE. 
....................  ***********************************************************************/ 
.................... #include <16F690.h> 
.................... //////// Standard Header file for the PIC16F690 device //////////////// 
.................... #device PIC16F690 
.................... #list 
....................  
.................... #FUSES  NOWDT, INTRC_IO, NOMCLR, BROWNOUT, NOCPD, NOPUT, NOIESO, NOFCMEN 
.................... #use    delay(clock=8000000) 
01C8:  MOVLW  33
01C9:  MOVWF  04
01CA:  BCF    03.7
01CB:  MOVF   00,W
01CC:  BTFSC  03.2
01CD:  GOTO   1DB
01CE:  MOVLW  02
01CF:  MOVWF  21
01D0:  CLRF   20
01D1:  DECFSZ 20,F
01D2:  GOTO   1D1
01D3:  DECFSZ 21,F
01D4:  GOTO   1D0
01D5:  MOVLW  97
01D6:  MOVWF  20
01D7:  DECFSZ 20,F
01D8:  GOTO   1D7
01D9:  DECFSZ 00,F
01DA:  GOTO   1CE
01DB:  BCF    0A.3
01DC:  GOTO   29A (RETURN)
.................... #use    rs232(baud=9600,xmit=PIN_A0,rcv=PIN_A1,parity=N,BITS=8,ERRORS) 
*
00A8:  BSF    03.5
00A9:  BCF    05.0
00AA:  BCF    03.5
00AB:  BCF    05.0
00AC:  MOVLW  08
00AD:  MOVWF  21
00AE:  GOTO   0AF
00AF:  NOP
00B0:  BSF    21.7
00B1:  GOTO   0C0
00B2:  BCF    21.7
00B3:  RRF    38,F
00B4:  BTFSC  03.0
00B5:  BSF    05.0
00B6:  BTFSS  03.0
00B7:  BCF    05.0
00B8:  BSF    21.6
00B9:  GOTO   0C0
00BA:  BCF    21.6
00BB:  DECFSZ 21,F
00BC:  GOTO   0B3
00BD:  GOTO   0BE
00BE:  NOP
00BF:  BSF    05.0
00C0:  MOVLW  3F
00C1:  MOVWF  04
00C2:  DECFSZ 04,F
00C3:  GOTO   0C2
00C4:  NOP
00C5:  BTFSC  21.7
00C6:  GOTO   0B2
00C7:  BTFSC  21.6
00C8:  GOTO   0BA
00C9:  RETURN
....................  
.................... #USE    FAST_IO(A) 
.................... #USE    FAST_IO(B) 
.................... #USE    FAST_IO(C) 
....................  
.................... /** 
....................  * Declare Variables 
....................  */ 
....................  
.................... #define P1_RX                    PIN_A0 
.................... #define P1_TX                    PIN_A1 
.................... #define LPC_SW1                  PIN_A3 
.................... #define EXT_SW1                  PIN_B4 
.................... #define LPC_DS1                  PIN_C0 
.................... #define LPC_DS2                  PIN_C1 
.................... #define LPC_DS3                  PIN_C2 
.................... #define LPC_DS4                  PIN_C3 
.................... #define CCP1_PIN                 PIN_C5 
....................  
.................... //------------------------- Local Variables ------------------------------ 
....................  int counterVal;                 // A Counter to demonstrate the functionality 
....................  boolean LED1;                   // Boolean representing LED1 
....................  boolean LED2;                   // Boolean representing LED2  
....................  boolean LED3;                   // Boolean representing LED3   
....................  int ccpVal;                     // Value contained in the CCP register. 
....................  int timer1Val;                  // Value representing Timer 01. 
....................  int timerOflwCount;             // Number of times the timer has overflow                 
....................  int timerOflwCount1;            // Number of times the timer has overflow                 
....................  boolean portBInterrupt;         // Interrupt occurred at Port B 
....................  boolean ccpInterrupt;           // Interrupt occurred for capture compare. 
....................  boolean risingEdge;             // Monitoring the Rising edge or Falling edge of CCP? 
....................                                      
....................                                   
.................... /**  
....................  * Interrupt routine on change of Port RB 
....................  */ 
....................   
.................... #INT_RB 
.................... void portB_ISR(void) 
.................... { 
....................    // Clean and Simple... Toggle the LED. 
....................    if(!portBInterrupt) 
*
003F:  BTFSC  2D.3
0040:  GOTO   044
....................    { 
....................       LED2= !LED2; 
0041:  MOVLW  02
0042:  XORWF  2D,F
....................       portBInterrupt = true; 
0043:  BSF    2D.3
....................    }    
.................... } 
....................  
.................... /**    
....................  * Interrupt routine on Capture Compare detection 
....................  */  
0044:  BCF    0B.0
0045:  BCF    0A.3
0046:  GOTO   028
.................... #INT_CCP1 
.................... void ccp1_ISR(void) 
.................... { 
....................    LED2= !LED2; // Robbing the portB LED to see if this is entering each occurrance. 
0047:  MOVLW  02
0048:  XORWF  2D,F
....................    // Clean and simple to start... Toggle another LED. 
....................    if(!ccpInterrupt) 
0049:  BTFSC  2D.4
004A:  GOTO   04F
....................    { 
....................       LED3 = !LED3; 
004B:  MOVLW  04
004C:  XORWF  2D,F
....................       //ccpInterrupt = true;                    // Don't want to print untul the falling edge/ 
....................       ccpVal = get_timer0();                    // Record the Value of the CCP Register. 
004D:  MOVF   01,W
004E:  MOVWF  2E
....................    } 
....................    // Add the additional maintenance routine here. 
....................    if(risingEdge) 
004F:  BTFSS  2D.5
0050:  GOTO   061
....................    {                                            // Monitoring the rising edge 
....................       set_timer0(0);                            // Reset the timer to Zero 
0051:  CLRF   01
....................       timerOflwCount = 0;                       // as well as the overflows. 
0052:  CLRF   30
....................       timerOflwCount1= 0; 
0053:  CLRF   31
....................       setup_ccp1(CCP_CAPTURE_FE);               // CCP set up for falling edge capture. 
0054:  CLRF   17
0055:  MOVLW  04
0056:  MOVWF  17
0057:  CLRF   1C
0058:  CLRF   1D
0059:  MOVLW  01
005A:  BSF    03.5
005B:  BSF    03.6
005C:  MOVWF  1D
....................       risingEdge = false;                        // Start monitoring the falling edge 
005D:  BCF    03.5
005E:  BCF    03.6
005F:  BCF    2D.5
....................    } 
....................    else                                         // Monitoring the Falling edge. 
0060:  GOTO   06F
....................    { 
....................       ccpInterrupt = true;                      // Main routine to print the results. 
0061:  BSF    2D.4
....................       setup_ccp1(CCP_CAPTURE_RE);               // Start monitoring the Rising Edge again. 
0062:  CLRF   17
0063:  MOVLW  05
0064:  MOVWF  17
0065:  CLRF   1C
0066:  CLRF   1D
0067:  MOVLW  01
0068:  BSF    03.5
0069:  BSF    03.6
006A:  MOVWF  1D
....................       disable_interrupts(INT_RTCC);             // Disabling the Timer RTCC - No adjust overflows. 
006B:  BCF    03.5
006C:  BCF    03.6
006D:  BCF    0B.5
....................       risingEdge = true;                        // Start monitoring the rising edge 
006E:  BSF    2D.5
....................    } 
....................    output_bit(LPC_DS2,LED2); 
006F:  BTFSC  2D.1
0070:  GOTO   073
0071:  BCF    07.1
0072:  GOTO   074
0073:  BSF    07.1
....................    output_bit(LPC_DS3,LED3); 
0074:  BTFSC  2D.2
0075:  GOTO   078
0076:  BCF    07.2
0077:  GOTO   079
0078:  BSF    07.2
....................  
.................... } 
....................  
.................... /** 
....................  * Interrupt routine for Timer elapsing 
....................  */ 
0079:  BCF    0C.2
007A:  BCF    0A.3
007B:  GOTO   028
.................... #INT_RTCC 
.................... void rtcc_ISR(void) 
.................... { 
....................    if(timerOflwCount==128) 
007C:  MOVF   30,W
007D:  SUBLW  80
007E:  BTFSS  03.2
007F:  GOTO   083
....................    { 
....................       timerOflwCount = 0; 
0080:  CLRF   30
....................       timerOflwCount1++; 
0081:  INCF   31,F
....................    } 
....................    else 
0082:  GOTO   084
....................       timerOflwCount++; 
0083:  INCF   30,F
....................        
....................    if(timerOflwCount1 > 127) 
0084:  MOVF   31,W
0085:  SUBLW  7F
0086:  BTFSS  03.0
....................       timerOflwCount1 = 0; 
0087:  CLRF   31
.................... } 
....................  
.................... /** 
....................  * Main Routine 
....................  */ 
0088:  BCF    0B.2
0089:  BCF    0A.3
008A:  GOTO   028
.................... void main(){ 
*
01DD:  CLRF   04
01DE:  BCF    03.7
01DF:  MOVLW  1F
01E0:  ANDWF  03,F
01E1:  MOVLW  71
01E2:  BSF    03.5
01E3:  MOVWF  0F
01E4:  MOVF   0F,W
01E5:  BCF    05.0
01E6:  BCF    03.5
01E7:  BSF    05.0
01E8:  BSF    03.6
01E9:  BCF    1F.0
01EA:  BCF    1F.1
01EB:  BCF    1F.2
01EC:  BCF    1F.3
01ED:  BCF    03.6
01EE:  BCF    1F.6
01EF:  MOVLW  00
01F0:  BSF    03.6
01F1:  MOVWF  1E
01F2:  CLRF   19
01F3:  CLRF   1A
01F4:  BSF    03.5
01F5:  CLRF   1E
01F6:  BCF    03.5
01F7:  CLRF   1B
01F8:  BCF    03.6
01F9:  BCF    0D.5
....................  
....................    setup_oscillator(OSC_8MHZ);               // set internal oscillator to 8Mhz 
01FA:  MOVLW  71
01FB:  BSF    03.5
01FC:  MOVWF  0F
01FD:  MOVF   0F,W
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);  // Set up Timer 1 
01FE:  MOVF   01,W
01FF:  ANDLW  C7
0200:  IORLW  08
0201:  MOVWF  01
....................    setup_ccp1(CCP_CAPTURE_RE);               // CCP set up for rising edge capture. 
0202:  BCF    03.5
0203:  CLRF   17
0204:  MOVLW  05
0205:  MOVWF  17
0206:  CLRF   1C
0207:  CLRF   1D
0208:  MOVLW  01
0209:  BSF    03.5
020A:  BSF    03.6
020B:  MOVWF  1D
....................    set_tris_a(0x3E);                         // setup port a 
020C:  MOVLW  3E
020D:  BCF    03.6
020E:  MOVWF  05
....................    //set_tris_b(0x10);                         // Pin B4 input (Interrupt) 
....................    set_tris_c(0x20);                         // setup port c (C5 interrupt pin) 
020F:  MOVLW  20
0210:  MOVWF  07
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD);      // No Analog signals       
0211:  BCF    03.5
0212:  BSF    03.6
0213:  BCF    1F.0
0214:  BCF    1F.1
0215:  BCF    1F.2
0216:  BCF    1F.3
0217:  BCF    03.6
0218:  BCF    1F.6
0219:  MOVLW  00
021A:  BSF    03.6
021B:  MOVWF  1E
....................    //enable_interrupts(INT_RB); 
....................    enable_interrupts(INT_CCP1);              // Enable Capture Compare Interrupts. 
021C:  BSF    03.5
021D:  BCF    03.6
021E:  BSF    0C.2
....................    enable_interrupts(INT_RTCC);              // Enable real time counter overflow <<<< This is causeing the RS232 issue to go apeshit. 
021F:  BCF    03.5
0220:  BSF    0B.5
....................    enable_interrupts(GLOBAL);                // Enable Global Interrupts 
0221:  MOVLW  C0
0222:  IORWF  0B,F
....................  
....................    port_a_pullups(TRUE); 
0223:  MOVLW  01
0224:  BSF    03.5
0225:  MOVWF  15
0226:  BCF    01.7
....................  
.................... // Setup Default values 
....................    LED1 = false; 
0227:  BCF    03.5
0228:  BCF    2D.0
....................    LED2 = false; 
0229:  BCF    2D.1
....................    LED3 = false; 
022A:  BCF    2D.2
....................    counterVal = 0; 
022B:  CLRF   2C
....................    ccpVal = 0; 
022C:  CLRF   2E
....................    output_low(LPC_DS1); 
022D:  BCF    07.0
....................    output_low(LPC_DS2); 
022E:  BCF    07.1
....................    output_low(LPC_DS3); 
022F:  BCF    07.2
....................    output_low(LPC_DS4); 
0230:  BCF    07.3
....................     
....................    while(1){         
....................        
....................       disable_interrupts(INT_RTCC);           // Ensure the RTCC Interrupt is disabled. 
0231:  BCF    0B.5
....................       counterVal++;                          // Increment CounterVal 
0232:  INCF   2C,F
....................       if((counterVal&0X80)>0) 
0233:  MOVF   2C,W
0234:  ANDLW  80
0235:  BTFSS  03.2
....................          counterVal = 0;                     // Manage overflow. 
0236:  CLRF   2C
....................        
....................       printf("Counter at %2u \r\n",counterVal);    // Print out the counter 
0237:  MOVLW  8B
0238:  BSF    03.6
0239:  MOVWF  0D
023A:  MOVLW  00
023B:  MOVWF  0F
023C:  BCF    03.0
023D:  MOVLW  0B
023E:  BCF    03.6
023F:  MOVWF  32
0240:  CALL   0CA
0241:  MOVF   2C,W
0242:  MOVWF  32
0243:  MOVLW  11
0244:  MOVWF  33
0245:  CALL   12E
0246:  MOVLW  20
0247:  MOVWF  38
0248:  CALL   0A8
0249:  MOVLW  0D
024A:  MOVWF  38
024B:  CALL   0A8
024C:  MOVLW  0A
024D:  MOVWF  38
024E:  CALL   0A8
....................       LED1 = !LED1; 
024F:  MOVLW  01
0250:  XORWF  2D,F
....................      
....................       // Output the Value of LED1 to ... LED1 funnily enough. 
....................       output_bit(LPC_DS1,LED1); 
0251:  BTFSC  2D.0
0252:  GOTO   255
0253:  BCF    07.0
0254:  GOTO   256
0255:  BSF    07.0
....................       output_bit(LPC_DS2,LED2); 
0256:  BTFSC  2D.1
0257:  GOTO   25A
0258:  BCF    07.1
0259:  GOTO   25B
025A:  BSF    07.1
....................       output_bit(LPC_DS3,LED3); 
025B:  BTFSC  2D.2
025C:  GOTO   25F
025D:  BCF    07.2
025E:  GOTO   260
025F:  BSF    07.2
....................     
....................    /* 
....................       if(portBInterrupt) 
....................       { 
....................          printf("Port B interrupt Detected\r\n"); 
....................          portBInterrupt = false; 
....................       } //*/ 
....................       if(ccpInterrupt) 
0260:  BTFSS  2D.4
0261:  GOTO   294
....................       { 
....................          printf("CCP interrupt Detected: %d - %d - %u\r\n",timerOflwCount1,timerOflwCount,ccpVal); 
0262:  MOVLW  94
0263:  BSF    03.6
0264:  MOVWF  0D
0265:  MOVLW  00
0266:  MOVWF  0F
0267:  BCF    03.0
0268:  MOVLW  18
0269:  BCF    03.6
026A:  MOVWF  32
026B:  CALL   0CA
026C:  MOVF   31,W
026D:  MOVWF  32
026E:  MOVLW  1F
026F:  MOVWF  33
0270:  CALL   163
0271:  MOVLW  20
0272:  MOVWF  38
0273:  CALL   0A8
0274:  MOVLW  2D
0275:  MOVWF  38
0276:  CALL   0A8
0277:  MOVLW  20
0278:  MOVWF  38
0279:  CALL   0A8
027A:  MOVF   30,W
027B:  MOVWF  32
027C:  MOVLW  1F
027D:  MOVWF  33
027E:  CALL   163
027F:  MOVLW  20
0280:  MOVWF  38
0281:  CALL   0A8
0282:  MOVLW  2D
0283:  MOVWF  38
0284:  CALL   0A8
0285:  MOVLW  20
0286:  MOVWF  38
0287:  CALL   0A8
0288:  MOVF   2E,W
0289:  MOVWF  32
028A:  MOVLW  1B
028B:  MOVWF  33
028C:  CALL   12E
028D:  MOVLW  0D
028E:  MOVWF  38
028F:  CALL   0A8
0290:  MOVLW  0A
0291:  MOVWF  38
0292:  CALL   0A8
....................          ccpInterrupt = false; 
0293:  BCF    2D.4
....................       } 
....................       enable_interrupts(INT_RTCC);           // Re-enable the Timer interrupt 
0294:  BSF    0B.5
....................       delay_ms(1000);                        // Delay a second.       
0295:  MOVLW  04
0296:  MOVWF  32
0297:  MOVLW  FA
0298:  MOVWF  33
0299:  GOTO   1C8
029A:  DECFSZ 32,F
029B:  GOTO   297
....................    } 
029C:  GOTO   231
.................... } 
029D:  SLEEP

Configuration Fuses:
   Word  1: 33D4   INTRC_IO NOPROTECT BROWNOUT NOMCLR NOCPD NOWDT NOPUT NOIESO NOFCMEN
