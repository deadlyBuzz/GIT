CCS PCM C Compiler, Version 4.105, 5967               20-Sep-13 21:54

               Filename: C:\Alan\GIT\serialTest\serialTest.lst

               ROM used: 691 words (17%)
                         Largest free fragment is 2048
               RAM used: 20 (8%) at main() level
                         28 (11%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   200
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  25
0008:  MOVF   7F,W
0009:  MOVWF  24
000A:  MOVF   0A,W
000B:  MOVWF  2B
000C:  CLRF   0A
000D:  SWAPF  24,F
000E:  MOVF   04,W
000F:  MOVWF  26
0010:  MOVF   20,W
0011:  MOVWF  27
0012:  MOVF   21,W
0013:  MOVWF  28
0014:  MOVF   22,W
0015:  MOVWF  29
0016:  MOVF   23,W
0017:  MOVWF  2A
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.5
001B:  GOTO   01E
001C:  BTFSC  0B.2
001D:  GOTO   039
001E:  MOVLW  8C
001F:  MOVWF  04
0020:  BTFSS  00.2
0021:  GOTO   024
0022:  BTFSC  0C.2
0023:  GOTO   03B
0024:  BTFSS  0B.3
0025:  GOTO   028
0026:  BTFSC  0B.0
0027:  GOTO   03D
0028:  MOVF   26,W
0029:  MOVWF  04
002A:  MOVF   27,W
002B:  MOVWF  20
002C:  MOVF   28,W
002D:  MOVWF  21
002E:  MOVF   29,W
002F:  MOVWF  22
0030:  MOVF   2A,W
0031:  MOVWF  23
0032:  MOVF   2B,W
0033:  MOVWF  0A
0034:  SWAPF  25,W
0035:  MOVWF  03
0036:  SWAPF  7F,F
0037:  SWAPF  7F,W
0038:  RETFIE
0039:  BCF    0A.3
003A:  GOTO   051
003B:  BCF    0A.3
003C:  GOTO   047
003D:  BCF    0A.3
003E:  GOTO   03F
.................... /***********************************************************************  
....................  * This works 
....................  * Author:  Alan Curley 
....................  * Date:    12 SEP 2013 
....................  * Program: serialTest.C            Version:    1.0 
....................  * Purpose:    This program is a simple test program that tests and outlines 
....................  *             a program that will communicate with the PicKit2 programmer 
....................  *             via the P1 connector using the LPC Demo board. 
....................  *             This way, the PicKit can be left connected to the programming 
....................  *             port for programming and serial communication testing. 
....................  *              - Added interrupt for driving LEDs  to determine what happens 
....................  *                to serial output. 
....................  *              - Added a routine for outputting a string on interrupt from  
....................  *                port B. 
....................  *              - Change/Add Capture compare routine to Trigger message send. 
....................  ***********************************************************************/ 
.................... #include <16F690.h> 
.................... //////// Standard Header file for the PIC16F690 device //////////////// 
.................... #device PIC16F690 
.................... #list 
....................  
.................... #FUSES  NOWDT, INTRC_IO, NOMCLR, BROWNOUT, NOCPD, NOPUT, NOIESO, NOFCMEN 
.................... #use    delay(clock=8000000) 
01EB:  MOVLW  33
01EC:  MOVWF  04
01ED:  BCF    03.7
01EE:  MOVF   00,W
01EF:  BTFSC  03.2
01F0:  GOTO   1FE
01F1:  MOVLW  02
01F2:  MOVWF  21
01F3:  CLRF   20
01F4:  DECFSZ 20,F
01F5:  GOTO   1F4
01F6:  DECFSZ 21,F
01F7:  GOTO   1F3
01F8:  MOVLW  97
01F9:  MOVWF  20
01FA:  DECFSZ 20,F
01FB:  GOTO   1FA
01FC:  DECFSZ 00,F
01FD:  GOTO   1F1
01FE:  BCF    0A.3
01FF:  GOTO   2AF (RETURN)
.................... #use    rs232(baud=9600,xmit=PIN_A0,rcv=PIN_A1,parity=N,BITS=8,ERRORS) 
*
0082:  BSF    03.5
0083:  BCF    05.0
0084:  BCF    03.5
0085:  BCF    05.0
0086:  MOVLW  08
0087:  MOVWF  21
0088:  GOTO   089
0089:  NOP
008A:  BSF    21.7
008B:  GOTO   09A
008C:  BCF    21.7
008D:  RRF    38,F
008E:  BTFSC  03.0
008F:  BSF    05.0
0090:  BTFSS  03.0
0091:  BCF    05.0
0092:  BSF    21.6
0093:  GOTO   09A
0094:  BCF    21.6
0095:  DECFSZ 21,F
0096:  GOTO   08D
0097:  GOTO   098
0098:  NOP
0099:  BSF    05.0
009A:  MOVLW  3F
009B:  MOVWF  04
009C:  DECFSZ 04,F
009D:  GOTO   09C
009E:  NOP
009F:  BTFSC  21.7
00A0:  GOTO   08C
00A1:  BTFSC  21.6
00A2:  GOTO   094
00A3:  RETURN
....................  
.................... #USE    FAST_IO(A) 
.................... #USE    FAST_IO(B) 
.................... #USE    FAST_IO(C) 
....................  
.................... /** 
....................  * Declare Variables 
....................  */ 
....................  
.................... #define P1_RX                    PIN_A0 
.................... #define P1_TX                    PIN_A1 
.................... #define LPC_SW1                  PIN_A3 
.................... #define EXT_SW1                  PIN_B4 
.................... #define LPC_DS1                  PIN_C0 
.................... #define LPC_DS2                  PIN_C1 
.................... #define LPC_DS3                  PIN_C2 
.................... #define LPC_DS4                  PIN_C3 
.................... #define CCP1_PIN                 PIN_C5 
....................  
.................... //------------------------- Local Variables ------------------------------ 
....................  int counterVal;                 // A Counter to demonstrate the functionality 
....................  boolean LED1;                   // Boolean representing LED1 
....................  boolean LED2;                   // Boolean representing LED2  
....................  boolean LED3;                   // Boolean representing LED3   
....................  int ccpVal;                     // Value contained in the CCP register. 
....................  int timer1Val;                  // Value representing Timer 01. 
....................  int timerOflwCount;             // Number of times the timer has overflow                 
....................  int timerOflwCount1;             // Number of times the timer has overflow                 
....................  boolean portBInterrupt;         // Interrupt occurred at Port B 
....................  boolean ccpInterrupt;           // Interrupt occurred for capture compare. 
....................                                      
....................                                   
.................... /**  
....................  * Interrupt routine on change of Port RB 
....................  */ 
....................   
.................... #INT_RB 
.................... void portB_ISR(void) 
.................... { 
....................    // Clean and Simple... Toggle the LED. 
....................    if(!portBInterrupt) 
*
003F:  BTFSC  2D.3
0040:  GOTO   044
....................    { 
....................       LED2= !LED2; 
0041:  MOVLW  02
0042:  XORWF  2D,F
....................       portBInterrupt = true; 
0043:  BSF    2D.3
....................    }    
.................... } 
....................  
.................... /** 
....................  * Interrupt routine on Capture Compare detection 
....................  */  
0044:  BCF    0B.0
0045:  BCF    0A.3
0046:  GOTO   028
.................... #INT_CCP1 
.................... void ccp1_ISR(void) 
.................... { 
....................    // Clean and simple to start... Toggle another LED. 
....................    if(!ccpInterrupt) 
0047:  BTFSC  2D.4
0048:  GOTO   04E
....................    { 
....................       LED3 = !LED3; 
0049:  MOVLW  04
004A:  XORWF  2D,F
....................       ccpInterrupt = true; 
004B:  BSF    2D.4
....................       ccpVal = get_timer0();                        // Record the Value of the CCP Register. 
004C:  MOVF   01,W
004D:  MOVWF  2E
....................    } 
.................... } 
....................  
.................... /** 
....................  * Interrupt routine for Timer elapsing 
....................  */ 
004E:  BCF    0C.2
004F:  BCF    0A.3
0050:  GOTO   028
.................... #INT_RTCC 
.................... void rtcc_ISR(void) 
.................... { 
....................    if(timerOflwCount==32765) 
0051:  MOVF   30,W
0052:  SUBLW  FD
0053:  BTFSS  03.2
0054:  GOTO   058
....................    { 
....................       timerOflwCount = 0; 
0055:  CLRF   30
....................       timerOflwCount1++; 
0056:  INCF   31,F
....................    } 
....................    else 
0057:  GOTO   059
....................       timerOflwCount++; 
0058:  INCF   30,F
....................        
....................    if(timerOflwCount1 > 32765) 
....................       timerOflwCount1 = 0; 
.................... } 
....................  
.................... /** 
....................  * Main Routine 
....................  */ 
0059:  BCF    0B.2
005A:  BCF    0A.3
005B:  GOTO   028
.................... void main(){ 
*
0200:  CLRF   04
0201:  BCF    03.7
0202:  MOVLW  1F
0203:  ANDWF  03,F
0204:  MOVLW  71
0205:  BSF    03.5
0206:  MOVWF  0F
0207:  MOVF   0F,W
0208:  BCF    05.0
0209:  BCF    03.5
020A:  BSF    05.0
020B:  BSF    03.6
020C:  BCF    1F.0
020D:  BCF    1F.1
020E:  BCF    1F.2
020F:  BCF    1F.3
0210:  BCF    03.6
0211:  BCF    1F.6
0212:  MOVLW  00
0213:  BSF    03.6
0214:  MOVWF  1E
0215:  CLRF   19
0216:  CLRF   1A
0217:  BSF    03.5
0218:  CLRF   1E
0219:  BCF    03.5
021A:  CLRF   1B
021B:  BCF    03.6
021C:  BCF    0D.5
....................  
....................    setup_oscillator(OSC_8MHZ);               // set internal oscillator to 8Mhz 
021D:  MOVLW  71
021E:  BSF    03.5
021F:  MOVWF  0F
0220:  MOVF   0F,W
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);  // Set up Timer 1 
0221:  MOVF   01,W
0222:  ANDLW  C7
0223:  IORLW  08
0224:  MOVWF  01
....................    setup_ccp1(CCP_CAPTURE_RE);               // CCP set up for rising edge capture. 
0225:  BCF    03.5
0226:  CLRF   17
0227:  MOVLW  05
0228:  MOVWF  17
0229:  CLRF   1C
022A:  CLRF   1D
022B:  MOVLW  01
022C:  BSF    03.5
022D:  BSF    03.6
022E:  MOVWF  1D
....................    set_tris_a(0x3E);                         // setup port a 
022F:  MOVLW  3E
0230:  BCF    03.6
0231:  MOVWF  05
....................    set_tris_b(0x10);                         // Pin B4 input (Interrupt) 
0232:  MOVLW  10
0233:  MOVWF  06
....................    set_tris_c(0x20);                         // setup port c (C5 interrupt pin) 
0234:  MOVLW  20
0235:  MOVWF  07
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD);      // No Analog signals       
0236:  BCF    03.5
0237:  BSF    03.6
0238:  BCF    1F.0
0239:  BCF    1F.1
023A:  BCF    1F.2
023B:  BCF    1F.3
023C:  BCF    03.6
023D:  BCF    1F.6
023E:  MOVLW  00
023F:  BSF    03.6
0240:  MOVWF  1E
....................    enable_interrupts(INT_RB); 
0241:  BCF    03.6
0242:  BSF    0B.3
0243:  MOVLW  FF
0244:  BSF    03.6
0245:  IORWF  16,F
....................    enable_interrupts(INT_CCP1);              // Enable Capture Compare Interrupts. 
0246:  BSF    03.5
0247:  BCF    03.6
0248:  BSF    0C.2
.................... //   enable_interrupts(INT_RTCC);              // Enable real time counter overflow 
....................    enable_interrupts(GLOBAL);                // Enable Global Interrupts 
0249:  MOVLW  C0
024A:  BCF    03.5
024B:  IORWF  0B,F
....................  
....................    port_a_pullups(TRUE); 
024C:  MOVLW  01
024D:  BSF    03.5
024E:  MOVWF  15
024F:  BCF    01.7
.................... // Setup Default values 
....................    LED1 = false; 
0250:  BCF    03.5
0251:  BCF    2D.0
....................    LED2 = false; 
0252:  BCF    2D.1
....................    LED3 = false; 
0253:  BCF    2D.2
....................    counterVal = 0; 
0254:  CLRF   2C
....................    ccpVal = 0; 
0255:  CLRF   2E
....................    output_low(LPC_DS1); 
0256:  BCF    07.0
....................    output_low(LPC_DS2); 
0257:  BCF    07.1
....................    output_low(LPC_DS3); 
0258:  BCF    07.2
....................    output_low(LPC_DS4); 
0259:  BCF    07.3
....................     
....................    while(1){         
....................       counterVal++;                          // Increment CounterVal 
025A:  INCF   2C,F
....................       if((counterVal&0X80)>0) 
025B:  MOVF   2C,W
025C:  ANDLW  80
025D:  BTFSS  03.2
....................          counterVal = 0;                     // Manage overflow. 
025E:  CLRF   2C
....................        
....................       printf("Counter at %2u \r\n",counterVal);    // Print out the counter 
025F:  MOVLW  5C
0260:  BSF    03.6
0261:  MOVWF  0D
0262:  MOVLW  00
0263:  MOVWF  0F
0264:  BCF    03.0
0265:  MOVLW  0B
0266:  BCF    03.6
0267:  MOVWF  32
0268:  CALL   0A4
0269:  MOVF   2C,W
026A:  MOVWF  32
026B:  MOVLW  11
026C:  MOVWF  33
026D:  GOTO   108
026E:  MOVLW  20
026F:  MOVWF  38
0270:  CALL   082
0271:  MOVLW  0D
0272:  MOVWF  38
0273:  CALL   082
0274:  MOVLW  0A
0275:  MOVWF  38
0276:  CALL   082
....................       LED1 = !LED1; 
0277:  MOVLW  01
0278:  XORWF  2D,F
....................      
....................       // Output the Value of LED1 to ... LED1 funnily enough. 
....................       output_bit(LPC_DS1,LED1); 
0279:  BTFSC  2D.0
027A:  GOTO   27D
027B:  BCF    07.0
027C:  GOTO   27E
027D:  BSF    07.0
....................       output_bit(LPC_DS2,LED2); 
027E:  BTFSC  2D.1
027F:  GOTO   282
0280:  BCF    07.1
0281:  GOTO   283
0282:  BSF    07.1
....................       output_bit(LPC_DS3,LED3); 
0283:  BTFSC  2D.2
0284:  GOTO   287
0285:  BCF    07.2
0286:  GOTO   288
0287:  BSF    07.2
....................        
....................       if(portBInterrupt) 
0288:  BTFSS  2D.3
0289:  GOTO   292
....................       { 
....................          printf("Port B interrupt Detected\r\n"); 
028A:  MOVLW  65
028B:  BSF    03.6
028C:  MOVWF  0D
028D:  MOVLW  00
028E:  MOVWF  0F
028F:  BCF    03.6
0290:  GOTO   13E
....................          portBInterrupt = false; 
0291:  BCF    2D.3
....................       } 
....................       if(ccpInterrupt) 
0292:  BTFSS  2D.4
0293:  GOTO   2AA
....................       { 
....................          printf("CCP interrupt Detected: %d\r\n",ccpVal); 
0294:  MOVLW  73
0295:  BSF    03.6
0296:  MOVWF  0D
0297:  MOVLW  00
0298:  MOVWF  0F
0299:  BCF    03.0
029A:  MOVLW  18
029B:  BCF    03.6
029C:  MOVWF  32
029D:  CALL   0A4
029E:  MOVF   2E,W
029F:  MOVWF  32
02A0:  MOVLW  1F
02A1:  MOVWF  33
02A2:  GOTO   185
02A3:  MOVLW  0D
02A4:  MOVWF  38
02A5:  CALL   082
02A6:  MOVLW  0A
02A7:  MOVWF  38
02A8:  CALL   082
....................          ccpInterrupt = false; 
02A9:  BCF    2D.4
....................       } 
....................        
....................       delay_ms(1000);                        // Delay a second.       
02AA:  MOVLW  04
02AB:  MOVWF  32
02AC:  MOVLW  FA
02AD:  MOVWF  33
02AE:  GOTO   1EB
02AF:  DECFSZ 32,F
02B0:  GOTO   2AC
....................    } 
02B1:  GOTO   25A
.................... } 
02B2:  SLEEP

Configuration Fuses:
   Word  1: 33D4   INTRC_IO NOPROTECT BROWNOUT NOMCLR NOCPD NOWDT NOPUT NOIESO NOFCMEN
